[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "On this about page, you might want to add more information about yourself, the project, or course. Any helpful context could go here!\nMy name is Nick Hand, the instructor for the course. You can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2023.\nAdipisicing proident minim non non dolor quis. Pariatur in ipsum aliquip magna. Qui ad aliqua nulla excepteur dolor nostrud quis nisi. Occaecat proident eiusmod in cupidatat. Elit qui laboris sit aliquip proident dolore. Officia commodo commodo in eiusmod aliqua sint cupidatat consectetur aliqua sint reprehenderit.\nOccaecat incididunt esse et elit adipisicing sit est cupidatat consequat. Incididunt exercitation amet dolor non sit anim veniam veniam sint velit. Labore irure reprehenderit ut esse. Minim quis commodo nisi voluptate."
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Altair and Hvplot Charts",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive charts produced using Altair and hvPlot."
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in Altair",
    "text": "Example: Measles Incidence in Altair\nFirst, let’s load the data for measles incidence in wide format:\n\n\nCode\nurl = \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/measles_incidence.csv\"\ndata = pd.read_csv(url, skiprows=2, na_values=\"-\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nWEEK\nALABAMA\nALASKA\nARIZONA\nARKANSAS\nCALIFORNIA\nCOLORADO\nCONNECTICUT\nDELAWARE\n...\nSOUTH DAKOTA\nTENNESSEE\nTEXAS\nUTAH\nVERMONT\nVIRGINIA\nWASHINGTON\nWEST VIRGINIA\nWISCONSIN\nWYOMING\n\n\n\n\n0\n1928\n1\n3.67\nNaN\n1.90\n4.11\n1.38\n8.38\n4.50\n8.58\n...\n5.69\n22.03\n1.18\n0.4\n0.28\nNaN\n14.83\n3.36\n1.54\n0.91\n\n\n1\n1928\n2\n6.25\nNaN\n6.40\n9.91\n1.80\n6.02\n9.00\n7.30\n...\n6.57\n16.96\n0.63\nNaN\n0.56\nNaN\n17.34\n4.19\n0.96\nNaN\n\n\n2\n1928\n3\n7.95\nNaN\n4.50\n11.15\n1.31\n2.86\n8.81\n15.88\n...\n2.04\n24.66\n0.62\n0.2\n1.12\nNaN\n15.67\n4.19\n4.79\n1.36\n\n\n3\n1928\n4\n12.58\nNaN\n1.90\n13.75\n1.87\n13.71\n10.40\n4.29\n...\n2.19\n18.86\n0.37\n0.2\n6.70\nNaN\n12.77\n4.66\n1.64\n3.64\n\n\n4\n1928\n5\n8.03\nNaN\n0.47\n20.79\n2.38\n5.13\n16.80\n5.58\n...\n3.94\n20.05\n1.57\n0.4\n6.70\nNaN\n18.83\n7.37\n2.91\n0.91\n\n\n\n\n5 rows × 53 columns\n\n\n\nThen, use the pandas.melt() function to convert it to tidy format:\n\n\nCode\nannual = data.drop(\"WEEK\", axis=1)\nmeasles = annual.groupby(\"YEAR\").sum().reset_index()\nmeasles = measles.melt(id_vars=\"YEAR\", var_name=\"state\", value_name=\"incidence\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nstate\nincidence\n\n\n\n\n0\n1928\nALABAMA\n334.99\n\n\n1\n1929\nALABAMA\n111.93\n\n\n2\n1930\nALABAMA\n157.00\n\n\n3\n1931\nALABAMA\n337.29\n\n\n4\n1932\nALABAMA\n10.21\n\n\n\n\n\n\n\nFinally, load altair:\n\nimport altair as alt\n\nAnd generate our final data viz:\n\n# use a custom color map\ncolormap = alt.Scale(\n    domain=[0, 100, 200, 300, 1000, 3000],\n    range=[\n        \"#F0F8FF\",\n        \"cornflowerblue\",\n        \"mediumseagreen\",\n        \"#FFEE00\",\n        \"darkorange\",\n        \"firebrick\",\n    ],\n    type=\"sqrt\",\n)\n\n# Vertical line for vaccination year\nthreshold = pd.DataFrame([{\"threshold\": 1963}])\n\n# plot YEAR vs state, colored by incidence\nchart = (\n    alt.Chart(measles)\n    .mark_rect()\n    .encode(\n        x=alt.X(\"YEAR:O\", axis=alt.Axis(title=None, ticks=False)),\n        y=alt.Y(\"state:N\", axis=alt.Axis(title=None, ticks=False)),\n        color=alt.Color(\"incidence:Q\", sort=\"ascending\", scale=colormap, legend=None),\n        tooltip=[\"state\", \"YEAR\", \"incidence\"],\n    )\n    .properties(width=650, height=500)\n)\n\nrule = alt.Chart(threshold).mark_rule(strokeWidth=4).encode(x=\"threshold:O\")\n\nout = chart + rule\nout"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in hvplot",
    "text": "Example: Measles Incidence in hvplot\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate the same data viz in hvplot:\n\n# Make the heatmap with hvplot\nheatmap = measles.hvplot.heatmap(\n    x=\"YEAR\",\n    y=\"state\",\n    C=\"incidence\", # color each square by the incidence\n    reduce_function=np.sum, # sum the incidence for each state/year\n    frame_height=450,\n    frame_width=600,\n    flip_yaxis=True,\n    rot=90,\n    colorbar=False,\n    cmap=\"viridis\",\n    xlabel=\"\",\n    ylabel=\"\",\n)\n\n# Some additional formatting using holoviews \n# For more info: http://holoviews.org/user_guide/Customizing_Plots.html\nheatmap = heatmap.redim(state=\"State\", YEAR=\"Year\")\nheatmap = heatmap.opts(fontsize={\"xticks\": 0, \"yticks\": 6}, toolbar=\"above\")\nheatmap"
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007"
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 550 Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. It’s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, you’re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550 Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. It’s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, you’re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#find-out-more",
    "href": "index.html#find-out-more",
    "title": "MUSA 550 Final Project Template",
    "section": "Find out more",
    "text": "Find out more\nThe code for this repository is hosted on our course’s GitHub page: https://github.com/MUSA-550-Fall-2023/quarto-website-template.\nWe covered the basics of getting started with Quarto and GitHub Pages in week 9. Take a look at the slides for lecture 9A to find out more."
  },
  {
    "objectID": "analysis/Final_Project_1211.html",
    "href": "analysis/Final_Project_1211.html",
    "title": "MUSA 550 Quarto Template",
    "section": "",
    "text": "import requests\nimport pandas as pd\nimport numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\nfrom matplotlib import pyplot as plt\n\n\n\n# Foursquare API key\noptions = {\n  'method': 'GET',\n  'headers': {\n    'accept': 'application/json',\n    'Authorization': 'fsq3PT0XzmGKLOcdzjrfsMjlII+0TdyLrtcRTy3TWjBWL1I=',\n  }\n}\n\n\n\n#creating loop to load all bars (50 at a time limit) in radius prescribed\n\n# initial foursquare places API link\nurl = 'https://api.foursquare.com/v3/places/search?query=bar&ll=39.96505871218218%2C-75.16367498832258&radius=15000&fields=name%2Cgeocodes%2Clocation%2Ccategories%2Crating%2Cprice%2Cmenu&limit=50'\n\n# initialize empty data list\nbars = []\n\n# create index to remove unneccessary characters from link later\nlength_html_end = len('&gt;; rel=\"next\"') # the link comes encased in an html tag &lt;&gt;; rel=\"next\"\n\nwhile url is not None:\n    resp = requests.get(url, headers=options[\"headers\"])\n    result = resp.json()\n    bars += result['results']\n    if 'Link' in resp.headers:\n        link = resp.headers['Link']\n        url = link[1:-length_html_end] # remove '&lt;' by starting at 1 and '&gt;; rel=\"next\"' by ending at -cut_tail\n    else: url = None\n\nprint(len(bars)) #should be over 50\n\n300\n\n\n\n# return list object back to dictionary for make_nice function, next\ndict_str = \"{'results': \" + str(bars) + \", 'context': {'geo_bounds': {'circle': {'center': {'latitude': 39.96505871218218, 'longitude': -75.16367498832258}, 'radius': 15000}}}}\"\ndict_object = eval(dict_str)\n\n\n#function to clean up the resulting data - could edit so more fields don't cause an error\n\ndef make_nice(data):\n    array = []\n    \n    for element in data.get('results', []):\n        nice_element = {\n            #\"ID\": element['categories']['id'],\n            \"name\": element['name'],\n            #\"price\": element['price'],\n            #\"rating\": element['rating'],\n            #\"address\": element['location']['address'],\n            \"census_block\": element['location']['census_block'],\n            \"zipcode\": element['location']['postcode'],\n            \"latitude\": element['geocodes']['main']['latitude'],\n            \"longitude\": element['geocodes']['main']['longitude'],\n        }\n        array.append(nice_element)\n    \n    return array\n\n\n#data all cleaned up\n\nnice_data = make_nice(dict_object)\nbars_df = pd.DataFrame.from_dict(nice_data)\nbars_df.head()\n\n\n\n\n\n\n\n\nname\ncensus_block\nzipcode\nlatitude\nlongitude\n\n\n\n\n0\nBar\n421010006001008\n19107\n39.950027\n-75.162350\n\n\n1\nU Bar\n421010009011008\n19107\n39.947654\n-75.161467\n\n\n2\nBottle Bar East\n421010144003028\n19125\n39.970528\n-75.134752\n\n\n3\nMonk's Cafe\n421010008052004\n19102\n39.947725\n-75.168093\n\n\n4\nFrankford Hall\n421010144003032\n19125\n39.969440\n-75.134524\n\n\n\n\n\n\n\n\n# data turned into a geopandas array\n\ngeometry = [Point(lon, lat) for lon, lat in zip(bars_df['longitude'], bars_df['latitude'])]\nbars_gdf = gpd.GeoDataFrame(bars_df, geometry=geometry, crs=\"EPSG:4326\")\nbars_gdf.head()\n\n\n\n\n\n\n\n\nname\ncensus_block\nzipcode\nlatitude\nlongitude\ngeometry\n\n\n\n\n0\nBar\n421010006001008\n19107\n39.950027\n-75.162350\nPOINT (-75.16235 39.95003)\n\n\n1\nU Bar\n421010009011008\n19107\n39.947654\n-75.161467\nPOINT (-75.16147 39.94765)\n\n\n2\nBottle Bar East\n421010144003028\n19125\n39.970528\n-75.134752\nPOINT (-75.13475 39.97053)\n\n\n3\nMonk's Cafe\n421010008052004\n19102\n39.947725\n-75.168093\nPOINT (-75.16809 39.94772)\n\n\n4\nFrankford Hall\n421010144003032\n19125\n39.969440\n-75.134524\nPOINT (-75.13452 39.96944)\n\n\n\n\n\n\n\n\n# mapping the bars for fun\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8))\n\n#city_limits.plot(ax=ax, facecolor=\"none\", edgecolor=\"black\")\nax.set_axis_off()\nax.set_aspect(\"equal\")\n\n# Plot the first city in the joined data frame (Vatican City)\n# Use the same axes by passing in the ax=ax keyword\nax = bars_gdf.plot(ax=ax, color=\"red\")\n\n# looks like something!\n\n\n\n\n\n#load the google sheets of quizzos\nquizzos = pd.read_csv(\"./Quizzos.csv\")\nquizzos\n\n\n\n\n\n\n\n\nID\nBUSINESS\nBUSINESS_TAGS\nTIME\nWEEKDAY\nOCCURRENCE_TYPES\nNEIGHBORHOOD\nADDRESS_STREET\nADDRESS_UNIT\nADDRESS_CITY\nADDRESS_STATE\nADDRESS_ZIP\nPRIZE_1_TYPE\nPRIZE_1_AMOUNT\nPRIZE_2_TYPE\nPRIZE_2_AMOUNT\nPRIZE_3_TYPE\nPRIZE_3_AMOUNT\nHOST\nEVENT_TYPE\n\n\n\n\n0\n2\n12 STEPS DOWN\nBAR\n8:00 PM\nWEDNESDAY\nNaN\nBELLA VISTA\n831 CHRISTIAN ST\nNaN\nPHILADELPHIA\nPA\n19147\nGIFT_CARD\n30.0\nGIFT_CARD\n15.0\nNaN\nNaN\nHTOTHEQUIZZO\nMUSIC_QUIZZO\n\n\n1\n3\nSEPARATIST BEER PROJECT\nBAR\n8:00 PM\nTHURSDAY\nNaN\nNaN\n101 NORTHAMPTON ST\nNaN\nEASTON\nPA\n18042\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMFROME8\nQUIZZO\n\n\n2\n4\nKRICK WUDER SALOON\nBAR\n7:00 PM\nWEDNESDAY\nNaN\nBRIDESBURG\n2676 BRIDGE ST\nNaN\nPHILADELPHIA\nPA\n19137\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nTHEPHILLYCAPTAIN\nQUIZZO\n\n\n3\n5\nDAVE AND BUSTER'S\nBAR,ARCADE\n7:30 PM\nTUESDAY\nNaN\nDELAWARE AVE\n325 N CHRISTOPHER COLUMBUS BLVD\nNaN\nPHILADELPHIA\nPA\n19106\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nGEEKS WHO DRINK\nQUIZZO\n\n\n4\n6\nTOP GOLF\nBAR,GOLF\n6:30 PM\nTHURSDAY\nNaN\nNORTHEAST PHILADELPHIA\n2140 BYBERRY RD\nNaN\nPHILADELPHIA\nPA\n19116\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nGEEKS WHO DRINK\nQUIZZO\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n153\n155\nSLIGO IRISH PUB\nRESTAURANT,BAR,IRISH_PUB\n8:00 PM\nTUESDAY\nNaN\nNaN\n113 W STATE ST\nNaN\nMEDIA\nPA\n19063\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nQUIZZO\n\n\n154\n156\nTOP TOMATO\nRESTAURANT,BAR,PIZZERIA\n7:00 PM\nTUESDAY\nNaN\nGAYBORHOOD\n116 S 11TH ST\nNaN\nPHILADELPHIA\nPA\n19107\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nQUIZZO\n\n\n155\n157\nLOCO PEZ\nRESTAURANT,BAR,TAQUERIA\n7:00 PM\nMONDAY\nNaN\nGRADUATE HOSPITAL\n700 S 20TH ST\nNaN\nPHILADELPHIA\nPA\n19146\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nJOHNNY GOODTIMES\nQUIZZO\n\n\n156\n158\nCHAR AND STAVE\nROASTERY,DISTILLERY\n7:00 PM\nTUESDAY\nNaN\nNaN\n21 RITTENHOUSE PL\nNaN\nARDMORE\nPA\n19003\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nQUIZZO\n\n\n157\n159\nCITY WINERY\nWINERY\n7:00 PM\nTUESDAY\nLAST_OF_MONTH\nCENTER CITY\n990 FILBERT ST\nNaN\nPHILADELPHIA\nPA\n19107\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nQUIZZO\n\n\n\n\n158 rows × 20 columns\n\n\n\n\n# join to bars dataset\nquizzo_bars = quizzos.join(bars_gdf, lsuffix=\"_left\", rsuffix=\"_right\")\nquizzo_bars\n\n\n\n\n\n\n\n\nID\nBUSINESS\nBUSINESS_TAGS\nTIME\nWEEKDAY\nOCCURRENCE_TYPES\nNEIGHBORHOOD\nADDRESS_STREET\nADDRESS_UNIT\nADDRESS_CITY\n...\nPRIZE_3_TYPE\nPRIZE_3_AMOUNT\nHOST\nEVENT_TYPE\nname\ncensus_block\nzipcode\nlatitude\nlongitude\ngeometry\n\n\n\n\n0\n2\n12 STEPS DOWN\nBAR\n8:00 PM\nWEDNESDAY\nNaN\nBELLA VISTA\n831 CHRISTIAN ST\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nHTOTHEQUIZZO\nMUSIC_QUIZZO\nBar\n421010006001008\n19107\n39.950027\n-75.162350\nPOINT (-75.16235 39.95003)\n\n\n1\n3\nSEPARATIST BEER PROJECT\nBAR\n8:00 PM\nTHURSDAY\nNaN\nNaN\n101 NORTHAMPTON ST\nNaN\nEASTON\n...\nNaN\nNaN\nMFROME8\nQUIZZO\nU Bar\n421010009011008\n19107\n39.947654\n-75.161467\nPOINT (-75.16147 39.94765)\n\n\n2\n4\nKRICK WUDER SALOON\nBAR\n7:00 PM\nWEDNESDAY\nNaN\nBRIDESBURG\n2676 BRIDGE ST\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nTHEPHILLYCAPTAIN\nQUIZZO\nBottle Bar East\n421010144003028\n19125\n39.970528\n-75.134752\nPOINT (-75.13475 39.97053)\n\n\n3\n5\nDAVE AND BUSTER'S\nBAR,ARCADE\n7:30 PM\nTUESDAY\nNaN\nDELAWARE AVE\n325 N CHRISTOPHER COLUMBUS BLVD\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nGEEKS WHO DRINK\nQUIZZO\nMonk's Cafe\n421010008052004\n19102\n39.947725\n-75.168093\nPOINT (-75.16809 39.94772)\n\n\n4\n6\nTOP GOLF\nBAR,GOLF\n6:30 PM\nTHURSDAY\nNaN\nNORTHEAST PHILADELPHIA\n2140 BYBERRY RD\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nGEEKS WHO DRINK\nQUIZZO\nFrankford Hall\n421010144003032\n19125\n39.969440\n-75.134524\nPOINT (-75.13452 39.96944)\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n153\n155\nSLIGO IRISH PUB\nRESTAURANT,BAR,IRISH_PUB\n8:00 PM\nTUESDAY\nNaN\nNaN\n113 W STATE ST\nNaN\nMEDIA\n...\nNaN\nNaN\nNaN\nQUIZZO\nShofuso Japanese House and Garden\n421019800021073\n19131\n39.981379\n-75.212888\nPOINT (-75.21289 39.98138)\n\n\n154\n156\nTOP TOMATO\nRESTAURANT,BAR,PIZZERIA\n7:00 PM\nTUESDAY\nNaN\nGAYBORHOOD\n116 S 11TH ST\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nNaN\nQUIZZO\nLincoln Financial Field\n421019806001013\n19148\n39.900778\n-75.167498\nPOINT (-75.16750 39.90078)\n\n\n155\n157\nLOCO PEZ\nRESTAURANT,BAR,TAQUERIA\n7:00 PM\nMONDAY\nNaN\nGRADUATE HOSPITAL\n700 S 20TH ST\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nJOHNNY GOODTIMES\nQUIZZO\nEssen Bakery\n421010028023008\n19147\n39.931013\n-75.161823\nPOINT (-75.16182 39.93101)\n\n\n156\n158\nCHAR AND STAVE\nROASTERY,DISTILLERY\n7:00 PM\nTUESDAY\nNaN\nNaN\n21 RITTENHOUSE PL\nNaN\nARDMORE\n...\nNaN\nNaN\nNaN\nQUIZZO\nArtisan Boulanger Patissier\n421010040014001\n19148\n39.926298\n-75.166379\nPOINT (-75.16638 39.92630)\n\n\n157\n159\nCITY WINERY\nWINERY\n7:00 PM\nTUESDAY\nLAST_OF_MONTH\nCENTER CITY\n990 FILBERT ST\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nNaN\nQUIZZO\nJohn's Roast Pork\n421019807021032\n19148\n39.921064\n-75.144945\nPOINT (-75.14495 39.92106)\n\n\n\n\n158 rows × 26 columns\n\n\n\n\n# Make the \"quizzo_bars\" df a gdf\n\ngeometry = [Point(lon, lat) for lon, lat in zip(quizzo_bars['longitude'], quizzo_bars['latitude'])]\nquizzo_bars = gpd.GeoDataFrame(quizzo_bars, geometry=geometry, crs=\"EPSG:4326\")\nquizzo_bars.head()\n\n\n\n\n\n\n\n\nID\nBUSINESS\nBUSINESS_TAGS\nTIME\nWEEKDAY\nOCCURRENCE_TYPES\nNEIGHBORHOOD\nADDRESS_STREET\nADDRESS_UNIT\nADDRESS_CITY\n...\nPRIZE_3_TYPE\nPRIZE_3_AMOUNT\nHOST\nEVENT_TYPE\nname\ncensus_block\nzipcode\nlatitude\nlongitude\ngeometry\n\n\n\n\n0\n2\n12 STEPS DOWN\nBAR\n8:00 PM\nWEDNESDAY\nNaN\nBELLA VISTA\n831 CHRISTIAN ST\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nHTOTHEQUIZZO\nMUSIC_QUIZZO\nBar\n421010006001008\n19107\n39.950027\n-75.162350\nPOINT (-75.16235 39.95003)\n\n\n1\n3\nSEPARATIST BEER PROJECT\nBAR\n8:00 PM\nTHURSDAY\nNaN\nNaN\n101 NORTHAMPTON ST\nNaN\nEASTON\n...\nNaN\nNaN\nMFROME8\nQUIZZO\nU Bar\n421010009011008\n19107\n39.947654\n-75.161467\nPOINT (-75.16147 39.94765)\n\n\n2\n4\nKRICK WUDER SALOON\nBAR\n7:00 PM\nWEDNESDAY\nNaN\nBRIDESBURG\n2676 BRIDGE ST\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nTHEPHILLYCAPTAIN\nQUIZZO\nBottle Bar East\n421010144003028\n19125\n39.970528\n-75.134752\nPOINT (-75.13475 39.97053)\n\n\n3\n5\nDAVE AND BUSTER'S\nBAR,ARCADE\n7:30 PM\nTUESDAY\nNaN\nDELAWARE AVE\n325 N CHRISTOPHER COLUMBUS BLVD\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nGEEKS WHO DRINK\nQUIZZO\nMonk's Cafe\n421010008052004\n19102\n39.947725\n-75.168093\nPOINT (-75.16809 39.94772)\n\n\n4\n6\nTOP GOLF\nBAR,GOLF\n6:30 PM\nTHURSDAY\nNaN\nNORTHEAST PHILADELPHIA\n2140 BYBERRY RD\nNaN\nPHILADELPHIA\n...\nNaN\nNaN\nGEEKS WHO DRINK\nQUIZZO\nFrankford Hall\n421010144003032\n19125\n39.969440\n-75.134524\nPOINT (-75.13452 39.96944)\n\n\n\n\n5 rows × 26 columns\n\n\n\n\n# Import Panel Dashboard Package \n\nimport hvplot.pandas \n\n\n\n\n\n\n\n\n\n\n\n\nimport holoviews as hv\nimport geoviews as gv\n\n\n#PANEL\nimport geoviews as gv\nfrom bokeh.plotting import show\nfrom bokeh.models import PrintfTickFormatter\nquizzo_bars = quizzo_bars[quizzo_bars['NEIGHBORHOOD'].notna()]\n\n\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n\nbars_with_hood = gpd.sjoin(\n    quizzo_bars,\n    neighborhoods.to_crs(quizzo_bars.crs), # REMEMBER: convert to the right CRS\n    predicate=\"within\",\n)\n\n\nbars_with_hood = bars_with_hood[['name','WEEKDAY','ZillowName','TIME','geometry']]\nbars_with_hood = bars_with_hood.rename(columns={'name':'Bar Name','WEEKDAY':'Weekday','TIME':'Time','ZillowName':'Neighborhood Name','geometry':'geometry'})\nbars_with_hood['Weekday'] = bars_with_hood['Weekday'].str.title()\n\n\n# Plot the neighborhood boundary\nm = neighborhoods.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tooltip=False\n)\n\n\n# Add the individual tickets as circle markers and style them\nbars_with_hood.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\",  # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\nm  # show map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n#Chloropleth of count per neighborhood\ncount_by_nhood = bars_with_hood.groupby('Neighborhood Name')['Neighborhood Name'].agg({'count'})\ncount_by_nhood = count_by_nhood.rename(columns={'count':'Number of Quizzos'})\ncount_by_nhood.head()\n\n\n\n\n\n\n\n\nNumber of Quizzos\n\n\nNeighborhood Name\n\n\n\n\n\nBella Vista\n7\n\n\nCallow Hill\n1\n\n\nCenter City\n3\n\n\nChinatown\n1\n\n\nDickinson Narrows\n1\n\n\n\n\n\n\n\n\ncount_by_nhood = neighborhoods.merge(count_by_nhood, left_on='ZillowName', right_on='Neighborhood Name')\ncount_by_nhood.head()\n\n\n\n\n\n\n\n\nZillowName\ngeometry\nNumber of Quizzos\n\n\n\n\n0\nBella Vista\nPOLYGON ((-75.15865 39.94277, -75.15757 39.942...\n7\n\n\n1\nCallow Hill\nPOLYGON ((-75.15245 39.96148, -75.15003 39.961...\n1\n\n\n2\nCenter City\nPOLYGON ((-75.15788 39.95747, -75.15827 39.955...\n3\n\n\n3\nChinatown\nPOLYGON ((-75.15393 39.95671, -75.15455 39.953...\n1\n\n\n4\nDickinson Narrows\nPOLYGON ((-75.15244 39.92716, -75.15294 39.924...\n1\n\n\n\n\n\n\n\n\ncount_by_nhood['area'] = count_by_nhood['geometry'].area\ncount_by_nhood['density'] = count_by_nhood['Number of Quizzos']/count_by_nhood['area']\ncount_by_nhood.head()\n\nC:\\Users\\14145\\AppData\\Local\\Temp\\ipykernel_30208\\281158030.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  count_by_nhood['area'] = count_by_nhood['geometry'].area\n\n\n\n\n\n\n\n\n\nZillowName\ngeometry\nNumber of Quizzos\narea\ndensity\n\n\n\n\n0\nBella Vista\nPOLYGON ((-75.15865 39.94277, -75.15757 39.942...\n7\n0.000051\n138216.181932\n\n\n1\nCallow Hill\nPOLYGON ((-75.15245 39.96148, -75.15003 39.961...\n1\n0.000058\n17195.733969\n\n\n2\nCenter City\nPOLYGON ((-75.15788 39.95747, -75.15827 39.955...\n3\n0.000041\n73652.735069\n\n\n3\nChinatown\nPOLYGON ((-75.15393 39.95671, -75.15455 39.953...\n1\n0.000013\n78013.059221\n\n\n4\nDickinson Narrows\nPOLYGON ((-75.15244 39.92716, -75.15294 39.924...\n1\n0.000048\n20931.937017\n\n\n\n\n\n\n\n\ncount_by_nhood['density'] = count_by_nhood['density']/count_by_nhood['density'].max()\ncount_by_nhood.head()\n\n\n\n\n\n\n\n\nZillowName\ngeometry\nNumber of Quizzos\narea\ndensity\n\n\n\n\n0\nBella Vista\nPOLYGON ((-75.15865 39.94277, -75.15757 39.942...\n7\n0.000051\n1.000000\n\n\n1\nCallow Hill\nPOLYGON ((-75.15245 39.96148, -75.15003 39.961...\n1\n0.000058\n0.124412\n\n\n2\nCenter City\nPOLYGON ((-75.15788 39.95747, -75.15827 39.955...\n3\n0.000041\n0.532881\n\n\n3\nChinatown\nPOLYGON ((-75.15393 39.95671, -75.15455 39.953...\n1\n0.000013\n0.564428\n\n\n4\nDickinson Narrows\nPOLYGON ((-75.15244 39.92716, -75.15294 39.924...\n1\n0.000048\n0.151443\n\n\n\n\n\n\n\n\nimport altair as alt\n \ndensity=alt.Chart(count_by_nhood).mark_geoshape().encode(\n\ncolor=alt.Color(\"density\", title='Relative Quizzo Density', legend=alt.Legend(), scale=alt.Scale(scheme='yellowgreen')),\n\ntooltip=['density', alt.Tooltip()]).properties(title=\"Density of Quizzo bars per neighborhood\"\n\n).project(\n    'albersUsa'\n\n).properties(\n\nwidth=1000,\n\nheight=600\n    \n\n)\n\nbackground = alt.Chart(neighborhoods).mark_geoshape(\n    stroke='grey',\n    fill='white'\n)\n\nbackground + density\n\n\n\n\n\n\n\n\nimport io\nimport panel as pn\nimport pandas as pd\nimport hvplot.pandas\n\n\n#function that does not \"know\" the widget \ndef hist_plot(x=\"Time\", color=\"#000000\"):\n    return bars_with_hood[x].value_counts().hvplot.bar(c=color)\n\n\n# Create the widget\ncategories = list(['Weekday','Time','Neighborhood Name'])\n\ncategorySelect = pn.widgets.Select(\n    value=\"Weekday\", options=categories, name=\"Category\"\n)\n\n\n#color Widget\ncolors = list(['#86a1db','#b4dfff','#f7ffb2','#ffdca7','#ffa3bf'])\n\ncolorsSelect = pn.widgets.Select(\n    value='#86a1db', options=colors, name=\"Color\"\n)\n\ncolorsSelect\n\n\n\n\n\n  \n\n\n\n\n\n\n# Create the dashboard - code from lecture 9B\nreactive_dashboard = pn.Column(\n    pn.Row(\n        pn.bind(hist_plot, x=categorySelect, color=colorsSelect),  # Main chart\n        pn.Column(\n            \"## Quizzo Explorer\", categorySelect,colorsSelect\n        ),  # Title and widgets\n    ),\n)\n\nreactive_dashboard\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nneighborhood_names = list(bars_with_hood['Neighborhood Name'].unique())\n\nneighborhood_names[:10]\n\n['Washington Square',\n 'Fishtown',\n 'Rittenhouse',\n 'Newbold',\n 'East Passyunk',\n 'Northern Liberties',\n 'Graduate Hospital',\n 'East Falls',\n 'Stadium District',\n 'Hawthorne']\n\n\n\n# Create the widget\nneighborhoodSelect = pn.widgets.Select(\n    value=\"University City\", options=neighborhood_names, name=\"Neighborhood\"\n)\n\nneighborhoodSelect\n\n\n\n\n\n  \n\n\n\n\n\ndef filter_by_neighborhood(data, neighborhood_name):\n    \"\"\"\n    Filter data by neighborhood.\n    \"\"\"\n\n    sel = bars_with_hood[\"Neighborhood Name\"] == neighborhood_name\n    return data.loc[sel]\n\n\ndef plot_ticket_data(data, neighborhood_name):\n    \"\"\"\n    Plot the ticket data and neighborhood boundary on a Folium map.\n    \"\"\"\n\n    # Get the neighborhood geometry\n    sel = neighborhoods[\"ZillowName\"] == neighborhood_name\n    hood_geo = neighborhoods.loc[sel]\n\n    # Plot the neighborhood boundary\n    m = hood_geo.explore(\n        style_kwds={\"weight\": 2, \"color\": \"black\", \"fillColor\": \"none\"},\n        name=\"Neighborhood boundary\",\n        tiles=\"cartodb positron\",\n        tooltip=False\n    )\n\n    # Step 4: Overlay the individual tickets as circle markers and style them\n    data.explore(\n        m=m,  # Add to the existing map!\n        marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n        marker_type=\"circle_marker\",  # or 'marker' or 'circle'\n        name=\"Tickets\"\n    )\n\n    return m\n\n\ndef create_dashboard_1(neighborhood_name):\n    \"\"\"\n    Plot trash-related requests for the input neighborhood.\n    \"\"\"\n    # Step 1: Filter the tickets data for input neighborhood\n    tickets = filter_by_neighborhood(bars_with_hood, neighborhood_name)\n\n    # Step 2: Make the Folium map\n    m = plot_ticket_data(tickets, neighborhood_name)\n\n    # Step 3: Return a Folium pane\n    # IMPORTANT: set the height!\n    return pn.pane.plot.Folium(m, height=600)\n\n\n# Create the dashboard\nticket_dashboard_1 = pn.Column(\n    # Top: the title and dropdown widget\n    pn.Column(\"## Quizzo Locations by Neighborhood\", neighborhoodSelect),\n    # Add a height spacer\n    pn.Spacer(height=25),\n    # Bottom: the main chart, bind widgets to the function\n    pn.bind(create_dashboard_1, neighborhood_name=neighborhoodSelect),\n)\n\n\nticket_dashboard_1"
  }
]